
mirea_learn.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000037c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000510  08000510  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000510  08000510  00010510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000514  08000514  00010514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08000518  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          0000001c  20000004  20000004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000200  20000020  20000020  00020004  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   00000daa  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000002dc  00000000  00000000  00020dde  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000000a8  00000000  00000000  000210c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000080  00000000  00000000  00021168  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00000478  00000000  00000000  000211e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000008c1  00000000  00000000  00021660  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00021f21  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000019c  00000000  00000000  00021fa0  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0002213c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080004f8 	.word	0x080004f8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	080004f8 	.word	0x080004f8

080001d4 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80001de:	4909      	ldr	r1, [pc, #36]	; (8000204 <NVIC_EnableIRQ+0x30>)
 80001e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e4:	095b      	lsrs	r3, r3, #5
 80001e6:	79fa      	ldrb	r2, [r7, #7]
 80001e8:	f002 021f 	and.w	r2, r2, #31
 80001ec:	2001      	movs	r0, #1
 80001ee:	fa00 f202 	lsl.w	r2, r0, r2
 80001f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80001f6:	bf00      	nop
 80001f8:	370c      	adds	r7, #12
 80001fa:	46bd      	mov	sp, r7
 80001fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000200:	4770      	bx	lr
 8000202:	bf00      	nop
 8000204:	e000e100 	.word	0xe000e100

08000208 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000208:	b480      	push	{r7}
 800020a:	b083      	sub	sp, #12
 800020c:	af00      	add	r7, sp, #0
 800020e:	4603      	mov	r3, r0
 8000210:	6039      	str	r1, [r7, #0]
 8000212:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000218:	2b00      	cmp	r3, #0
 800021a:	da0b      	bge.n	8000234 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800021c:	490d      	ldr	r1, [pc, #52]	; (8000254 <NVIC_SetPriority+0x4c>)
 800021e:	79fb      	ldrb	r3, [r7, #7]
 8000220:	f003 030f 	and.w	r3, r3, #15
 8000224:	3b04      	subs	r3, #4
 8000226:	683a      	ldr	r2, [r7, #0]
 8000228:	b2d2      	uxtb	r2, r2
 800022a:	0112      	lsls	r2, r2, #4
 800022c:	b2d2      	uxtb	r2, r2
 800022e:	440b      	add	r3, r1
 8000230:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000232:	e009      	b.n	8000248 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000234:	4908      	ldr	r1, [pc, #32]	; (8000258 <NVIC_SetPriority+0x50>)
 8000236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023a:	683a      	ldr	r2, [r7, #0]
 800023c:	b2d2      	uxtb	r2, r2
 800023e:	0112      	lsls	r2, r2, #4
 8000240:	b2d2      	uxtb	r2, r2
 8000242:	440b      	add	r3, r1
 8000244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000248:	bf00      	nop
 800024a:	370c      	adds	r7, #12
 800024c:	46bd      	mov	sp, r7
 800024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000252:	4770      	bx	lr
 8000254:	e000ed00 	.word	0xe000ed00
 8000258:	e000e100 	.word	0xe000e100

0800025c <TIM2_IRQHandler>:

	TIM6->CR1 |= TIM_CR1_CEN;
}

int count_pulse = 1;
void TIM2_IRQHandler() {
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM_SR_UIF;
 8000260:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000264:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000268:	691b      	ldr	r3, [r3, #16]
 800026a:	f023 0301 	bic.w	r3, r3, #1
 800026e:	6113      	str	r3, [r2, #16]
	if (count_pulse % 350 == 0) {
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <TIM2_IRQHandler+0x68>)
 8000272:	681a      	ldr	r2, [r3, #0]
 8000274:	4b14      	ldr	r3, [pc, #80]	; (80002c8 <TIM2_IRQHandler+0x6c>)
 8000276:	fb83 1302 	smull	r1, r3, r3, r2
 800027a:	11d9      	asrs	r1, r3, #7
 800027c:	17d3      	asrs	r3, r2, #31
 800027e:	1acb      	subs	r3, r1, r3
 8000280:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8000284:	fb01 f303 	mul.w	r3, r1, r3
 8000288:	1ad3      	subs	r3, r2, r3
 800028a:	2b00      	cmp	r3, #0
 800028c:	d10f      	bne.n	80002ae <TIM2_IRQHandler+0x52>
		TIM2->CCR1++;
 800028e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000292:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000294:	3201      	adds	r2, #1
 8000296:	635a      	str	r2, [r3, #52]	; 0x34
		if (TIM2->CCR1 > 1100) {
 8000298:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800029c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800029e:	f240 424c 	movw	r2, #1100	; 0x44c
 80002a2:	4293      	cmp	r3, r2
 80002a4:	d903      	bls.n	80002ae <TIM2_IRQHandler+0x52>
			TIM2->CCR1 = 0;
 80002a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002aa:	2200      	movs	r2, #0
 80002ac:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	count_pulse++;
 80002ae:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <TIM2_IRQHandler+0x68>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	3301      	adds	r3, #1
 80002b4:	4a03      	ldr	r2, [pc, #12]	; (80002c4 <TIM2_IRQHandler+0x68>)
 80002b6:	6013      	str	r3, [r2, #0]
}
 80002b8:	bf00      	nop
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	20000000 	.word	0x20000000
 80002c8:	5d9f7391 	.word	0x5d9f7391

080002cc <init_tim2_as_pwm>:

void init_tim2_as_pwm() {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 80002d0:	4a2a      	ldr	r2, [pc, #168]	; (800037c <init_tim2_as_pwm+0xb0>)
 80002d2:	4b2a      	ldr	r3, [pc, #168]	; (800037c <init_tim2_as_pwm+0xb0>)
 80002d4:	695b      	ldr	r3, [r3, #20]
 80002d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002da:	6153      	str	r3, [r2, #20]
	GPIOA->MODER |= GPIO_MODER_MODER0_1;
 80002dc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	f043 0302 	orr.w	r3, r3, #2
 80002ea:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |= (1 << 0);
 80002ec:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002f4:	6a1b      	ldr	r3, [r3, #32]
 80002f6:	f043 0301 	orr.w	r3, r3, #1
 80002fa:	6213      	str	r3, [r2, #32]

	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80002fc:	4a1f      	ldr	r2, [pc, #124]	; (800037c <init_tim2_as_pwm+0xb0>)
 80002fe:	4b1f      	ldr	r3, [pc, #124]	; (800037c <init_tim2_as_pwm+0xb0>)
 8000300:	69db      	ldr	r3, [r3, #28]
 8000302:	f043 0301 	orr.w	r3, r3, #1
 8000306:	61d3      	str	r3, [r2, #28]

	TIM2->ARR = 1000;
 8000308:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800030c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000310:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;	//<- pwm mode 1!!!
 8000312:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000316:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000320:	6193      	str	r3, [r2, #24]
	TIM2->CCER |= TIM_CCER_CC1E;
 8000322:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000326:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800032a:	6a1b      	ldr	r3, [r3, #32]
 800032c:	f043 0301 	orr.w	r3, r3, #1
 8000330:	6213      	str	r3, [r2, #32]

	TIM2->CCR1 = 0;
 8000332:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000336:	2200      	movs	r2, #0
 8000338:	635a      	str	r2, [r3, #52]	; 0x34

	TIM2->BDTR |= TIM_BDTR_MOE;
 800033a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800033e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000344:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000348:	6453      	str	r3, [r2, #68]	; 0x44


	TIM2->DIER |= TIM_DIER_UIE;
 800034a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800034e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000352:	68db      	ldr	r3, [r3, #12]
 8000354:	f043 0301 	orr.w	r3, r3, #1
 8000358:	60d3      	str	r3, [r2, #12]
	NVIC_SetPriority(TIM2_IRQn, 3);	//<- ????
 800035a:	2103      	movs	r1, #3
 800035c:	201c      	movs	r0, #28
 800035e:	f7ff ff53 	bl	8000208 <NVIC_SetPriority>
	NVIC_EnableIRQ(TIM2_IRQn);		//<- ????
 8000362:	201c      	movs	r0, #28
 8000364:	f7ff ff36 	bl	80001d4 <NVIC_EnableIRQ>

	TIM2->CR1 |= TIM_CR1_CEN;
 8000368:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800036c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	f043 0301 	orr.w	r3, r3, #1
 8000376:	6013      	str	r3, [r2, #0]
}
 8000378:	bf00      	nop
 800037a:	bd80      	pop	{r7, pc}
 800037c:	40021000 	.word	0x40021000

08000380 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler() {
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
	TIM6->SR &= ~TIM_SR_UIF;
 8000384:	4a09      	ldr	r2, [pc, #36]	; (80003ac <TIM6_DAC_IRQHandler+0x2c>)
 8000386:	4b09      	ldr	r3, [pc, #36]	; (80003ac <TIM6_DAC_IRQHandler+0x2c>)
 8000388:	691b      	ldr	r3, [r3, #16]
 800038a:	f023 0301 	bic.w	r3, r3, #1
 800038e:	6113      	str	r3, [r2, #16]
	BLINK();
 8000390:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000394:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000398:	695b      	ldr	r3, [r3, #20]
 800039a:	f083 0301 	eor.w	r3, r3, #1
 800039e:	6153      	str	r3, [r2, #20]
}
 80003a0:	bf00      	nop
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	40001000 	.word	0x40001000

080003b0 <main>:

int main(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
//	init_gpio();
//	init_tim();
	init_tim2_as_pwm();
 80003b6:	f7ff ff89 	bl	80002cc <init_tim2_as_pwm>

	int i = 0;
 80003ba:	2300      	movs	r3, #0
 80003bc:	607b      	str	r3, [r7, #4]
	while(1) {
		i++;
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	3301      	adds	r3, #1
 80003c2:	607b      	str	r3, [r7, #4]
 80003c4:	e7fb      	b.n	80003be <main+0xe>
	...

080003c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000400 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80003cc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80003ce:	e003      	b.n	80003d8 <LoopCopyDataInit>

080003d0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80003d0:	4b0c      	ldr	r3, [pc, #48]	; (8000404 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80003d2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80003d4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80003d6:	3104      	adds	r1, #4

080003d8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80003d8:	480b      	ldr	r0, [pc, #44]	; (8000408 <LoopForever+0xa>)
	ldr	r3, =_edata
 80003da:	4b0c      	ldr	r3, [pc, #48]	; (800040c <LoopForever+0xe>)
	adds	r2, r0, r1
 80003dc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80003de:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80003e0:	d3f6      	bcc.n	80003d0 <CopyDataInit>
	ldr	r2, =_sbss
 80003e2:	4a0b      	ldr	r2, [pc, #44]	; (8000410 <LoopForever+0x12>)
	b	LoopFillZerobss
 80003e4:	e002      	b.n	80003ec <LoopFillZerobss>

080003e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80003e6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80003e8:	f842 3b04 	str.w	r3, [r2], #4

080003ec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80003ec:	4b09      	ldr	r3, [pc, #36]	; (8000414 <LoopForever+0x16>)
	cmp	r2, r3
 80003ee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80003f0:	d3f9      	bcc.n	80003e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80003f2:	f000 f813 	bl	800041c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003f6:	f000 f85b 	bl	80004b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80003fa:	f7ff ffd9 	bl	80003b0 <main>

080003fe <LoopForever>:

LoopForever:
    b LoopForever
 80003fe:	e7fe      	b.n	80003fe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000400:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000404:	08000518 	.word	0x08000518
	ldr	r0, =_sdata
 8000408:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800040c:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 8000410:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 8000414:	20000020 	.word	0x20000020

08000418 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000418:	e7fe      	b.n	8000418 <ADC1_2_IRQHandler>
	...

0800041c <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000420:	4a1f      	ldr	r2, [pc, #124]	; (80004a0 <SystemInit+0x84>)
 8000422:	4b1f      	ldr	r3, [pc, #124]	; (80004a0 <SystemInit+0x84>)
 8000424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000428:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800042c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000430:	4a1c      	ldr	r2, [pc, #112]	; (80004a4 <SystemInit+0x88>)
 8000432:	4b1c      	ldr	r3, [pc, #112]	; (80004a4 <SystemInit+0x88>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	f043 0301 	orr.w	r3, r3, #1
 800043a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 800043c:	4919      	ldr	r1, [pc, #100]	; (80004a4 <SystemInit+0x88>)
 800043e:	4b19      	ldr	r3, [pc, #100]	; (80004a4 <SystemInit+0x88>)
 8000440:	685a      	ldr	r2, [r3, #4]
 8000442:	4b19      	ldr	r3, [pc, #100]	; (80004a8 <SystemInit+0x8c>)
 8000444:	4013      	ands	r3, r2
 8000446:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000448:	4a16      	ldr	r2, [pc, #88]	; (80004a4 <SystemInit+0x88>)
 800044a:	4b16      	ldr	r3, [pc, #88]	; (80004a4 <SystemInit+0x88>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000452:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000456:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000458:	4a12      	ldr	r2, [pc, #72]	; (80004a4 <SystemInit+0x88>)
 800045a:	4b12      	ldr	r3, [pc, #72]	; (80004a4 <SystemInit+0x88>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000462:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000464:	4a0f      	ldr	r2, [pc, #60]	; (80004a4 <SystemInit+0x88>)
 8000466:	4b0f      	ldr	r3, [pc, #60]	; (80004a4 <SystemInit+0x88>)
 8000468:	685b      	ldr	r3, [r3, #4]
 800046a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800046e:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8000470:	4a0c      	ldr	r2, [pc, #48]	; (80004a4 <SystemInit+0x88>)
 8000472:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <SystemInit+0x88>)
 8000474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000476:	f023 030f 	bic.w	r3, r3, #15
 800047a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 800047c:	4909      	ldr	r1, [pc, #36]	; (80004a4 <SystemInit+0x88>)
 800047e:	4b09      	ldr	r3, [pc, #36]	; (80004a4 <SystemInit+0x88>)
 8000480:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000482:	4b0a      	ldr	r3, [pc, #40]	; (80004ac <SystemInit+0x90>)
 8000484:	4013      	ands	r3, r2
 8000486:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000488:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <SystemInit+0x88>)
 800048a:	2200      	movs	r2, #0
 800048c:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800048e:	4b04      	ldr	r3, [pc, #16]	; (80004a0 <SystemInit+0x84>)
 8000490:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000494:	609a      	str	r2, [r3, #8]
#endif
}
 8000496:	bf00      	nop
 8000498:	46bd      	mov	sp, r7
 800049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049e:	4770      	bx	lr
 80004a0:	e000ed00 	.word	0xe000ed00
 80004a4:	40021000 	.word	0x40021000
 80004a8:	f87fc00c 	.word	0xf87fc00c
 80004ac:	ff00fccc 	.word	0xff00fccc

080004b0 <__libc_init_array>:
 80004b0:	b570      	push	{r4, r5, r6, lr}
 80004b2:	4e0d      	ldr	r6, [pc, #52]	; (80004e8 <__libc_init_array+0x38>)
 80004b4:	4c0d      	ldr	r4, [pc, #52]	; (80004ec <__libc_init_array+0x3c>)
 80004b6:	1ba4      	subs	r4, r4, r6
 80004b8:	10a4      	asrs	r4, r4, #2
 80004ba:	2500      	movs	r5, #0
 80004bc:	42a5      	cmp	r5, r4
 80004be:	d109      	bne.n	80004d4 <__libc_init_array+0x24>
 80004c0:	4e0b      	ldr	r6, [pc, #44]	; (80004f0 <__libc_init_array+0x40>)
 80004c2:	4c0c      	ldr	r4, [pc, #48]	; (80004f4 <__libc_init_array+0x44>)
 80004c4:	f000 f818 	bl	80004f8 <_init>
 80004c8:	1ba4      	subs	r4, r4, r6
 80004ca:	10a4      	asrs	r4, r4, #2
 80004cc:	2500      	movs	r5, #0
 80004ce:	42a5      	cmp	r5, r4
 80004d0:	d105      	bne.n	80004de <__libc_init_array+0x2e>
 80004d2:	bd70      	pop	{r4, r5, r6, pc}
 80004d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80004d8:	4798      	blx	r3
 80004da:	3501      	adds	r5, #1
 80004dc:	e7ee      	b.n	80004bc <__libc_init_array+0xc>
 80004de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80004e2:	4798      	blx	r3
 80004e4:	3501      	adds	r5, #1
 80004e6:	e7f2      	b.n	80004ce <__libc_init_array+0x1e>
 80004e8:	08000510 	.word	0x08000510
 80004ec:	08000510 	.word	0x08000510
 80004f0:	08000510 	.word	0x08000510
 80004f4:	08000514 	.word	0x08000514

080004f8 <_init>:
 80004f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004fa:	bf00      	nop
 80004fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004fe:	bc08      	pop	{r3}
 8000500:	469e      	mov	lr, r3
 8000502:	4770      	bx	lr

08000504 <_fini>:
 8000504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000506:	bf00      	nop
 8000508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800050a:	bc08      	pop	{r3}
 800050c:	469e      	mov	lr, r3
 800050e:	4770      	bx	lr
